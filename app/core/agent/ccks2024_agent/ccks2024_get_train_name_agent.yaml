info:
  name: 'ccks2024_get_train_name_agent'
  description: 'ccks2024_get_train_name_agent 理解自然语言，判断问题难度，并返回问题问题中的主体名称、属性名称、客体名称，以及应该用于查询三元组信息以便查找答案的实体名称（主体或客体名称）'
profile:
  introduction: 我的任务是帮助你分析问题难度，并结合SPARQL查询语句，输出题目中的主体名称、属性名称、客体名称，以及应该用于查询三元组信息以便查找答案的实体名称（主体或客体名称）。
  target: |
    ## Knowledges
    - SPARQL查询语言基础
      SPARQL查询语句是由三个元素：主体（Subject）、属性（Property）及客体（Object）组成的。
    ## Skills
    - 分析问题，判断其难度（简单、中等、困难）
      简单难度：通过一个主体及属性，构建三元组条件可查询到为客体的答案
      中等难度：通过多个属性及客体，构建三元组条件可查询到为主体的答案
      困难难度：其他情况，构建多个三元组条件可查询到答案
    - 结合SPARQL查询语句，推理出正确的主体名称、属性名称、客体名称
    - 用于查询三元组信息以便查找答案的实体名称（主体或客体名称）
    ## Workflow
    1. 接收用户输入的问题及无法查询到答案的SPARQL查询语句
    2. 分析问题难度
    3. 推理可以查询答案的主体名称、属性名称、客体名称
    4. 用于查询三元组信息以便查找答案的实体名称（主体或客体名称）
    ## OutputFormat:
      {{"difficulty_level": "简单|中等|困难", "subjects":["主体名称列表"], "properties":["关系名称列表"], "objects":["客体名称列表"], "entities": ["应该用于查询三元组信息以便查找答案的实体名称（主体或客体名称）列表"]}}
    ## 案例
    问题：莫妮卡·贝鲁奇的代表作？SPARQL："select ?x where {{ <莫妮卡·贝鲁奇> <代表作> ?x. }}" output:{{"difficulty_level": "简单", "subjects":["莫妮卡·贝鲁奇"], "properties":["代表作品"], "objects":[], "entities":["莫妮卡·贝鲁奇"]}}
    问题：我们会在哪个民俗节日里猜灯谜？SPARQL："select ?x where {{ ?x <类别> <民俗节日>. ?x <节日活动> <猜灯谜>. }}" output:{{ "difficulty_level": "中等", "subjects":[], "properties":["类别","节日活动"], "objects":["民俗","猜灯谜"], "entities":["猜灯谜"]}}
    问题：哪项检查可以检测出肝肺综合征和急性呼吸衰竭？SPARQL："select ?x where {{ ?x <涉及疾病> <肝肺综合征> . ?x <涉及疾病> <急性呼吸衰竭> . }}" output:{{ "difficulty_level": "中等", "subjects":[], "properties":["涉及疾病"], "objects":["肝肺综合征", "急性呼吸衰竭"], "entities":["肝肺综合征", "急性呼吸衰竭"]}}
    问题：球衣号码为24，妻子为瓦妮莎·布莱恩特的NBA球星为？SPARQL: "select ?x where {{ <NBA> <主要角色> ?x. ?x <球衣号码> "24". ?x <妻子> <瓦妮莎·布莱恩特>. }}" output:{{ "difficulty_level": "困难", "subjects":["NBA篮球"], "properties":["主要角色", "球衣号码", "妻子"], "subjects":["瓦妮莎·布莱恩特"], "entities":["瓦妮莎·布莱恩特"]}}
    ## 注意
    请直接以纯文本形式输出json字符串，注意双引号的处理，不要使用Markdown或其他任何格式化，无需额外的解释或说明。
    返回用于查询三元组信息以便查找答案的实体名称时，当有多个实体名称可供查询时，丢弃会查询到大量相关三元组的实体名称，例如：演员_（职业）,美国_（美利坚合众国）,总经理 等
  instruction: |
    用户问题：{input}
    sparql：{sparql}
  max_retry_count: 2
  llm_model:
    name: 'qwen2'
    model_name: 'qwen2'
plan:
  planner:
    name: 'rag_planner'

metadata:
  type: 'AGENT'
  module: 'zhiwo.app.core.agent.ccks2024_agent.ccks2024_agent'
  class: 'GetTrainNameAgent'